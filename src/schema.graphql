type Query {
  hello: String!
  users: [User!]!
  profile: User!
  maindishes: [MainDish!]!
  sidedishes: [SideDish!]!
  proteins: [Protein!]!
  orders: [Order!]!
}

type Mutation {
  createUser(data: createUserInput): User!
  createAdmin(data: createUserInput): User!
  login(email: String!, password: String!): AuthPayload
  toggleUserActivation(id: ID!): User!
  changeFirstPassword(newPassword: String!): Boolean!
  createMainDish(name: String!): MainDish!
  createSideDish(name: String!): SideDish!
  createProtein(name: String!): Protein!
  createOrder(data: createOrderInput!): Order!
}

type User {
  id: ID!
  firstName: String!
  otherNames: String
  lastName: String!
  email: String!
  role: Role!
  password: String!
  hasChangedPassword: Boolean!
  activated: Boolean!
  orders: [Order!]!
}

type Order {
  id: ID!
  createdAt: String!
  createdFor: String!
  createdBy: User!
  # meal: Meal!
  main: MainDish!
  side: SideDish!
  protein: Protein!
}

# type Meal {
#   id: ID!
#   order: Order!
# main: MainDish!
# side: SideDish!
# protein: Protein!
# }

type MainDish {
  id: ID!
  name: String!
  orders: [Order!]!
}

type SideDish {
  id: ID!
  name: String!
  orders: [Order!]!
}

type Protein {
  id: ID!
  name: String!
  orders: [Order!]!
}

input createUserInput {
  firstName: String!
  otherNames: String
  lastName: String!
  email: String!
}

input createOrderInput {
  createdFor: String!
  main: ID!
  side: ID!
  protein: ID!
}

type AuthPayload {
  token: String!
  user: User!
}

enum Role {
  ADMIN
  NORMAL_USER
}
